#!/bin/python
import os
import sys
from collections import OrderedDict

sys.path.append(os.path.join(os.path.dirname(__file__), 'common'))
from common import utils, gfx

# Arguments
script_name = sys.argv[0]
rom_filename = sys.argv[1]
gfx_src_path = sys.argv[2]
gfx_raw_path = sys.argv[3]
gfx_out_path = sys.argv[4]


# We just manually define tilesets to dump, there's not really any table
tileset_information = (
    # Name, Address, Type (1bpp, 2bpp), Tile Count (ignored when compressed), Ignored in tile data
    ["Font1", (0x8, 0x4000), "1bpp", 0x800, False],
    ["Font2", (0x9, 0x4000), "1bpp", 0x800, False],
    ["Font3", (0xA, 0x4000), "1bpp", 0x800, False],
    ["DoubleHeightFont1", (0x6, 0x4110), "1bpp", 0x210, False],
    ["DoubleHeightFont2", (0x6, 0x6000), "1bpp", 0x400, False],
    ["DoubleHeightFont3", (0x7, 0x4000), "1bpp", 0x5d6, False]
)

gfx_src_filename = os.path.join(gfx_src_path, "tilesets_data.asm")

with open(rom_filename, "rb") as rom, open(gfx_src_filename, "w") as source_fp:
    source_fp.write(f"; File initially autogenerated by {script_name}\n")
    source_fp.write('\n')

    for tileset in tileset_information:
        name = tileset[0]
        address = utils.rom2realaddr(tileset[1]) if isinstance(tileset[1], tuple) else tileset[1]
        rom_address = tileset[1] if isinstance(tileset[1], tuple) else utils.real2romaddr(tileset[1])
        png_filename = os.path.join(gfx_raw_path, f"{name}.{tileset[2]}.png")
        out_filename = os.path.join(gfx_out_path, f"{name}.{tileset[2]}")
        size = 0
        ignored = tileset[4]

        rom.seek(address)
        data = []
        assert tileset[2] in ["2bpp", "1bpp"]
        assert tileset[3] is not None
        bytes_per_tile = 0
        if tileset[2] == "1bpp":
            bytes_per_tile = (1 * 8 * 8) // 8
            size = bytes_per_tile * tileset[3]
            data = rom.read(size)
            gfx.dump_1bpp_to_png(png_filename, data)
        elif tileset[2] == "2bpp":
            bytes_per_tile = (2 * 8 * 8) // 8
            size = bytes_per_tile * tileset[3]
            data = rom.read(size)
            gfx.dump_2bpp_to_png(png_filename, data)

        source_fp.write(f'SECTION "Tileset {name}", ROMX[${rom_address[1]:04X}], BANK[${rom_address[0]:02X}]\n')
        source_fp.write(f'Tileset{name}::\n')
        if ignored:
            source_fp.write(';')
        source_fp.write(f'  INCBIN "{out_filename}"\n')
        source_fp.write(f'SECTION "Tileset {name} End", ROMX[${utils.real2romaddr(rom.tell() - 1)[1]:04X}], BANK[${rom_address[0]:02X}]\n')
        
        source_fp.write('\n')